<div :style="'background-image: url(\'' + src + '\''" class="div_img" v-if="src != ''"></div>
                <img id="filesrc" :src="src" class="file_img" />
                <q-file dark dense outlined color="ele" bg-color="ele2" v-model="file" counter clearable @clear="src=''" @input="onUploadFile()" :label="$t('upload_slip')">
                  <template v-slot:append>
                    <q-icon name="create_new_folder" @click.stop/>
                  </template>
                  <span class="text-red-4">*</span>
                </q-file>

<style>

.div_img {
  /* object-fit: cover; */
  border-radius: 4px 4px 0 0;
  height: 140px;
  width: 100%;
  background-position: 50% 50%;
  background-size: cover;
  background-repeat: no-repeat;
}
.file_img {
  width: 100%; display: none;
}
</style>


<script>
    function onDeposit () {
      this.$refs.form.isLoading = true;

      function dataURLToBlob (dataURL) {
        var parts = dataURL.split(';base64,')
        var contentType = parts[0].split(':')[1]
        var raw = window.atob(parts[1])
        var rawLength = raw.length
        var uInt8Array = new Uint8Array(rawLength)
        for (var i = 0; i < rawLength; ++i) {
          uInt8Array[i] = raw.charCodeAt(i)
        }
        return new Blob([uInt8Array], { type: contentType })
      }
      function getBase64Image() {
        var img = document.getElementById('filesrc');
        var canvas = document.createElement('canvas')
        canvas.width = img.width
        canvas.height = img.height
        var ctx = canvas.getContext('2d')
        ctx.drawImage(img, 0, 0)
        var dataURL = canvas.toDataURL('image/jpeg', 0.5)
        return dataURLToBlob(dataURL)
        // return dataURL.replace(/^data:image\/(png|jpg);base64,/, "")
      }
      var self = this;
      function readFile () {
        var selectedFile = self.file;
        var fileReader = new FileReader();
        var base64;
        fileReader.onload = function(fileLoadedEvent) {
            base64 = fileLoadedEvent.target.result;
            return dataURLToBlob(base64)
        };
        fileReader.readAsDataURL(selectedFile);
      }
      var file_src = null;
      if (this.file.type == 'image/png' || this.file.type == 'image/jpeg') file_src = getBase64Image()
      // else if (this.file.type == 'application/pdf') file_src = readFile()

      let QueryParams = this.bankid + DMT +
                        this.d_amount + DMT +
                        '{imagefilepath}' + DMT +
                        this.d_remark + DMT +
                        getUserId()
      var formData = new FormData(document.forms[0])
      formData.append('CatalogId', CATALOG_ID)
      formData.append('ProcessId', DEPOSIT)
      formData.append('Rev', REV_NO)
      formData.append('QueryParams', encrypt(QueryParams))
      formData.append('FolderGroup', moment(new Date()).format('YYYY MMDD ').replace(/\s/g, '\\') +
                                    getUserId() + '\\')
      formData.append('ImageFile', file_src)
      post(GAPI_API_PATH_UPLOAD, formData, ApiHeader())
        .then((response) => {
          this.msgbox_title =this.$t('transfer.d_request_success');
          this.msgbox_content = this.$t('w_msg')
          this.confirmation = true;

          this.transfer_dialog = false
          this.check_agree = false;
          this.d_step = 1
          this.file = null
          this.src = '';
          this.d_remark = '';
          this.d_amount = null;
          this.type = 1;
          this.bankid = '';
          this.getWalletListing('none')
        })
        .catch((error) => {
          if (error.response === undefined) {
            notify('error', error.toString())
          } else {
            var error_msg = error.response.data.Msg == undefined ?
                            error.response.data.Message :
                            error.response.data.Msg
            insertLog('onUploadFile', error_msg)
            if (error.response.status == 412) {
              this.LoadingDone();
              return verifySystemData()
            }//handle Invalid header.
            notify('error', error_msg)
          }
          this.LoadingDone();
        })
    },


   function onUploadFile () {
      if (this.file == null) return;
      // if (this.file.type != 'image/png' && this.file.type != 'image/jpeg' && this.file.type != 'application/pdf') {
      if (this.file.type != 'image/png' && this.file.type != 'image/jpeg') {
        this.file = null;
        return notify('error', this.$t('upload_slip_error'))
      }
      this.src = window.URL.createObjectURL(this.file)
    },
</script>